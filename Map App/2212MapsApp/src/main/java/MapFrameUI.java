import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.*;
import java.awt.Graphics;
import java.awt.Dimension;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.Image;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Draws and manages the window for displaying in-building maps.
 * 
 * @author Kyven Tran
 * @author Trevor Seaman
 */
public class MapFrameUI extends javax.swing.JFrame {

    private final String[] buildingsList = {"Middlesex College", "Thompson Engineering Building", "Westminster Hall"};
    private final int[] middlesexFloors = {0, 1, 2, 3, 4};
    private final String[] middlesexFloorsList = {"Floor 0", "Floor 1", "Floor 2", "Floor 3", "Floor 4"};
    private final int[] thompsonFloors = {0, 1, 2, 3, 4, 5};
    private final String[] thompsonFloorsList = {"Floor 0", "Floor 1", "Floor 2", "Floor 3", "Floor 4", "Floor 5"};
    private final int[] westminsterFloors = {0, 1, 2, 3};
    private final String[] westminsterFloorsList = {"Floor 0", "Floor 1", "Floor 2", "Floor 3"};
    private final String[] roomTypesList = {"Room Type", "Classroom", "Computer Lab", "Collaborative Room", "Mens Washroom", "Restaurant", "Unisex Washroom", "Womens Washroom"};
    /**
     * Building name
     */
    public static String building;
    /**
     * SideBar object for sidebar in window
     */
    public SideBar sidebar;
    
    /**
     * Map object for map in window
     */
    public Map map;
    
    /** 
     * The image for the map panel
     */
    Image mapPanelImage;

    public static MapFrameUI mainFrame;

    /**
     * The mouse manager for moving and controlling events
     */
    private MouseManager mouseManager;
    
    
    /**
     * MapFrameUI constructor. Creates a MapFrameUI object.
     */
    
    public MapFrameUI(String building) {
        mainFrame = this;
        this.getContentPane().setBackground(Color.white); // Set background of frame to white
        this.setExtendedState(JFrame.MAXIMIZED_BOTH); // Make window open in fullscreen
        this.setTitle("Western Map System"); // Set window title
        map = new Map();
        sidebar = new SideBar(building);
        this.building = building;
        int floor = sidebar.getFloor();
        initComponents();
        ActionEvent event = new ActionEvent(new Object(), 0, "Initialize Map");
        this.buildingSelect.setSelectedItem(building); // Call building switch to initialize map
        buildingSelectActionPerformed(event);
        // initialize mouse manager for frame
        mouseManager = new MouseManager(this);
    }
    
    /** Repaints map in standard position */
    public void drawMap() {
        map.setPosition(0, 0);
        redrawMap();
    }
    
    /** Repaints map */
    public void redrawMap() {
        sidebar.refresh(); // Refresh sidebar
        updateSidebarList();
        map.buildMap(this.building, sidebar.getFloor(), sidebar.getPoints()); // Store new map data
        mapPanel.removeAll(); // Get rid of old icons      
        // Reset and fetch new map
        BufferedImage img = null;
        try{
            img = ImageIO.read(new File(map.getImagePath()));
            Map.setImageSize(img.getWidth(), img.getHeight());
            mapPanelImage = img;
        } catch (Exception e){ System.out.println("Invalid Image Path"); }
        mapPanel.repaint(); // Repaint map
        drawIcons(map.icons); // Repaint icons
    }
    
    /** Adds icons to the map panel
     * 
     * @param icons the set of icons to be displayed to the map panel
     */
    public void drawIcons(ArrayList<Icon> icons) {
        if(mapPanel == null)
            return;

        for (Icon icon : icons) {
            mapPanel.add(icon.imgLabel);
        }
    }
    
    /** Returns the current building being displayed */
    public static String getBuilding() {
        return building;
    }
    /** Returns the current floor being displayed */
    public static int getFloor() {
        return SideBar.getFloor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        toolbarPanel = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        buildingSelect = new javax.swing.JComboBox<>();
        resetMapSize = new javax.swing.JButton();
        Sidebar = new javax.swing.JPanel();
        Search = new javax.swing.JTextField();
        Favourited = new javax.swing.JToggleButton();
        FloorNum = new javax.swing.JComboBox<>();
        RoomType = new javax.swing.JComboBox<>();
        sideBarListPane = new javax.swing.JScrollPane();
        sideBarList = new javax.swing.JList<>();
        sidebarDeselect = new javax.swing.JButton();
        filterReset = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        mapPanel = new javax.swing.JPanel(){

            public void paintComponent(Graphics g) {
                int[] pos = Map.getPosition();
                int[] size = Map.getImageSize();
                if (building.equals("Middlesex College")) {
                    setBounds(pos[0] -  350, pos[1] - 150, (int) ((float) size[0]/1.5f), (int) ((float) size[1]/1.5f));
                    g.drawImage(mapPanelImage, 0, 0, this.getSize().width, this.getSize().height, this);
                }
                if (building.equals("Thompson Engineering Building")) {
                    if (sidebar.getFloor() == 0) {
                        setBounds(pos[0] - 1600, pos[1] - 200, size[0], size[1]);
                    }
                    else {
                        setBounds(pos[0] - 400, pos[1] - 100, size[0], size[1]);
                    }
                    g.drawImage(mapPanelImage, 0, 0, this.getSize().width, this.getSize().height, this);
                }
                if (building.equals("Westminster Hall")) {
                    setBounds(pos[0] - 450, pos[1] + 150, size[0], size[1]);
                    g.drawImage(mapPanelImage, 0, 0, this.getSize().width, this.getSize().height, this);
                }
            }
        };

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolbarPanel.setBackground(new java.awt.Color(34, 40, 49));
        toolbarPanel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        homeButton.setBackground(new java.awt.Color(244, 244, 248));
        homeButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        homeButton.setText("Campus Map");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        helpButton.setBackground(new java.awt.Color(244, 244, 248));
        helpButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        buildingSelect.setBackground(new java.awt.Color(244, 244, 248));
        buildingSelect.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        buildingSelect.setModel(new javax.swing.DefaultComboBoxModel<>(buildingsList));
        if (building.equals(buildingsList[0])) {
            buildingSelect.setSelectedIndex(0);
        } else if (building.equals(buildingsList[1])) {
            buildingSelect.setSelectedIndex(1);
        } else if (building.equals(buildingsList[2])) {
            buildingSelect.setSelectedIndex(2);
        }
        buildingSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingSelectActionPerformed(evt);
            }
        });

        resetMapSize.setBackground(new java.awt.Color(244, 244, 248));
        resetMapSize.setText("Reset Map");
        resetMapSize.setAlignmentY(0.0F);
        resetMapSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMapSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolbarPanelLayout = new javax.swing.GroupLayout(toolbarPanel);
        toolbarPanel.setLayout(toolbarPanelLayout);
        toolbarPanelLayout.setHorizontalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolbarPanelLayout.createSequentialGroup()
                .addComponent(homeButton)
                .addGap(18, 18, 18)
                .addComponent(helpButton)
                .addGap(18, 18, 18)
                .addComponent(buildingSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resetMapSize)
                .addGap(0, 462, Short.MAX_VALUE))
        );
        toolbarPanelLayout.setVerticalGroup(
            toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolbarPanelLayout.createSequentialGroup()
                .addGap(0, 2, Short.MAX_VALUE)
                .addGroup(toolbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(helpButton)
                    .addComponent(buildingSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetMapSize))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Sidebar.setBackground(new java.awt.Color(34, 40, 49));
        Sidebar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Search.setBackground(new java.awt.Color(204, 204, 204));
        Search.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Search.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Favourited.setBackground(new java.awt.Color(244, 244, 248));
        Favourited.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Favourited.setText("Favourites");
        Favourited.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FavouritedActionPerformed(evt);
            }
        });

        FloorNum.setBackground(new java.awt.Color(244, 244, 248));
        FloorNum.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        if (building.equals(buildingsList[0])) {
            FloorNum.setModel(new javax.swing.DefaultComboBoxModel<>(middlesexFloorsList));
        } else if (building.equals(buildingsList[1])) {
            FloorNum.setModel(new javax.swing.DefaultComboBoxModel<>(thompsonFloorsList));
        } else if (building.equals(buildingsList[2])) {
            FloorNum.setModel(new javax.swing.DefaultComboBoxModel<>(westminsterFloorsList));
        }
        FloorNum.setSelectedIndex(1);
        FloorNum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FloorNumItemStateChanged(evt);
            }
        });

        RoomType.setBackground(new java.awt.Color(244, 244, 248));
        RoomType.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        RoomType.setModel(new javax.swing.DefaultComboBoxModel<>(roomTypesList));
        RoomType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RoomTypeItemStateChanged(evt);
            }
        });

        sideBarList.setBackground(new java.awt.Color(40, 50, 60));
        sideBarList.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        for (int i = 0; i< sideBarList.getModel().getSize(); i++) {
            sideBarList.remove(i);
        }
        Point[] points = sidebar.searchPOI("");
        ArrayList<String> pointsNames = new ArrayList<String>();
        for (int i = 0; i < points.length; i++) {
            pointsNames.add(points[i].getName());
        }
        sideBarList.setForeground(new java.awt.Color(244, 244, 248));
        sideBarList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = pointsNames.toArray(String[]::new);
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        sideBarList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sideBarListValueChanged(evt);
            }
        });
        sideBarListPane.setViewportView(sideBarList);

        sidebarDeselect.setBackground(new java.awt.Color(244, 244, 248));
        sidebarDeselect.setText("Deselect");
        sidebarDeselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sidebarDeselectActionPerformed(evt);
            }
        });

        filterReset.setBackground(new java.awt.Color(244, 244, 248));
        filterReset.setText("Reset");
        filterReset.setAlignmentY(0.0F);
        filterReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SidebarLayout = new javax.swing.GroupLayout(Sidebar);
        Sidebar.setLayout(SidebarLayout);
        SidebarLayout.setHorizontalGroup(
            SidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidebarLayout.createSequentialGroup()
                .addGroup(SidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SidebarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sideBarListPane)
                            .addGroup(SidebarLayout.createSequentialGroup()
                                .addComponent(filterReset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Favourited)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FloorNum, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(SidebarLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SidebarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sidebarDeselect)
                .addGap(155, 155, 155))
        );
        SidebarLayout.setVerticalGroup(
            SidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidebarLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Favourited)
                    .addComponent(FloorNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterReset))
                .addGap(14, 14, 14)
                .addComponent(sideBarListPane, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sidebarDeselect)
                .addContainerGap())
        );

        mapPanel.setForeground(new java.awt.Color(248, 248, 248));
        mapPanel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLayeredPane1.setLayer(mapPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toolbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sidebar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Sidebar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** -------- Beginning of Sidebar Functions -------- */
    /* Updates the sidebar list */
    private void updateSidebarList() {
        Point[] sidebarPoints = sidebar.searchPOI("");
        ArrayList<String> pointsNames = new ArrayList<String>();
        for (int i = 0; i < sidebarPoints.length; i++) {
            if (sidebarPoints[i].getName() != "") {
                pointsNames.add(sidebarPoints[i].getName());
            }
        }
        sideBarList.setListData(pointsNames.toArray(String[]::new));
    }
    
    /** Fetches current list of points from sidebar*/
    private String[] sideBarList() {
        Point[] pointsArr = sidebar.getPoints();
        ArrayList<String> pointsNames = new ArrayList<String>();
        for (int i = 0; i < pointsArr.length; i++) {
            if (pointsArr[i].getName() != "") {
                pointsNames.add(pointsArr[i].getName());
            }
        }
        return pointsNames.toArray(String[]::new);
    }
    
    /**
     * Updates sidebar if the Favourites button is toggled
     * @param evt Event of user pressing Favourites button
     */
    private void FavouritedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FavouritedActionPerformed
        // TODO add your handling code here:
        if (Favourited.isSelected()) {
            System.out.println("Favourites toggled");
            sidebar.enableOnlyFavourites(true);
           }
        else {
            System.out.println("Favourites untoggled");
            sidebar.enableOnlyFavourites(false);
        }
        
        // Redraw map
        redrawMap();
    }//GEN-LAST:event_FavouritedActionPerformed

    /**
     * Updates sidebar if the Floor in the Floor Number combo box is changed
     * @param evt Event of item change in Floor Number combo box
     */
    private void FloorNumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FloorNumItemStateChanged
        // TODO add your handling code here:
        String selectedFloor = (String) FloorNum.getSelectedItem();
        System.out.println(selectedFloor);
        if (selectedFloor == null) {
            return;
        }
        String selectedFloorNum = selectedFloor.replace("Floor ", "");
        int floorNum = Integer.parseInt(selectedFloorNum);
        sidebar.enableOnlyFloor(floorNum);
        sidebar.refresh();
        updateSidebarList();
        
        // Switch map display
        Point[] points = sidebar.getPoints();
        map.buildMap(building.replaceAll("\\s", ""), floorNum, points);
        
        // Redraw the map
        drawMap();    
    }//GEN-LAST:event_FloorNumItemStateChanged

    /**
     * Updates sidebar if the Room Type in the Room Type combo box is changed
     * @param evt Event of item change in Room Type combo box
     */
    private void RoomTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RoomTypeItemStateChanged
        // TODO add your handling code here:
        String selectedRoomType = (String) RoomType.getSelectedItem();
        System.out.println(selectedRoomType);
        sidebar.enableOnlyIcon(selectedRoomType);
        sidebar.refresh();
        updateSidebarList();
        
        redrawMap();
    }//GEN-LAST:event_RoomTypeItemStateChanged

    /**
     * Updates sidebar if the user uses the search bar
     * @param evt Event of user pressing Enter while typing in search bar
     */
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String searchTerm = Search.getText();
        System.out.println(searchTerm);
        Point[] points = sidebar.searchPOI(searchTerm);
        ArrayList<String> pointsList = new ArrayList<String>();
        for (int i = 0; i < points.length; i++) {
            pointsList.add(points[i].getName());
        }
        sideBarList.setListData(pointsList.toArray(String[]::new));
    }//GEN-LAST:event_SearchActionPerformed

    /**
     * Sends the user back to the home page upon pressing the Home button
     * @param evt Event of user pressing Home button
     */
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        try{
            new HomeWindow().setVisible(true);
            System.out.println("Send to home page");
            this.dispose();
        }catch (Exception e){}
    }//GEN-LAST:event_homeButtonActionPerformed

    /**
     * Updates building upon user changing the building in the Building combo box
     * @param evt Event of item change in Building combo box
     */
    private void buildingSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingSelectActionPerformed
        // TODO add your handling code here:
        String selectedBuilding = (String) buildingSelect.getSelectedItem();
        System.out.println(selectedBuilding);
        building = selectedBuilding;
        sidebar.setBuilding(building);
        FloorNum.removeAllItems();
        if (building.equals(buildingsList[0])) {
            for (int i = 0; i < middlesexFloorsList.length; i++) {
                FloorNum.addItem(middlesexFloorsList[i]);
            }
        } else if (building.equals(buildingsList[1])) {
            for (int i = 0; i < thompsonFloorsList.length; i++) {
                FloorNum.addItem(thompsonFloorsList[i]);
            }
        } else if (building.equals(buildingsList[2])) {
            for (int i = 0; i < westminsterFloorsList.length; i++) {
                FloorNum.addItem(westminsterFloorsList[i]);
            }       
        }
        // Update sidebar filters
        Favourited.setSelected(false);
        RoomType.setSelectedIndex(0);
        FloorNum.setSelectedIndex(1);
        Search.setText("Search");
        sideBarList.clearSelection();
        updateSidebarList();

        // Draw new map
        drawMap();
    }//GEN-LAST:event_buildingSelectActionPerformed

    /**
     * Opens help menu upon user pressing Help button
     * @param evt Event of user pressing Help button
     */
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Insert help popup");
        HelpMenu helpMenu = new HelpMenu();
        helpMenu.display();
    }//GEN-LAST:event_helpButtonActionPerformed

    private void sideBarListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sideBarListValueChanged
        // TODO add your handling code here:
        System.out.println(sideBarList.getSelectedValue());
        
        int index = sideBarList.getSelectedIndex();
        if (index >= 0) {
            Frame frame = new Frame();
            selectPOI dialog = new selectPOI(frame, true, map.icons.get(index));
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_sideBarListValueChanged

        /** -------- End of Sidebar functions -------- */
    
    /** Window maximized listener */
    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
        boolean isMaximized = isMaximized(evt.getNewState());
        boolean wasMaximized = isMaximized(evt.getOldState());
        if (isMaximized && !wasMaximized) {
            System.out.println("user maximized the window");
            
        } else if (wasMaximized && !isMaximized) {
            System.out.println("user unmaximized the window");
        }
    }//GEN-LAST:event_formWindowStateChanged

    /** Resets map size
     * 
     * @param evt Event to initialize reset map size
     */
    private void resetMapSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetMapSizeActionPerformed
        // TODO add your handling code here:
        Map.setPosition(0, 0);
        Map.setScale(1);
        mapPanel.repaint();
    }//GEN-LAST:event_resetMapSizeActionPerformed

    /** Form window close event
     * 
     * @param evt Initializes closing of window
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        AccountManager.LogOut();
    }//GEN-LAST:event_formWindowClosing

    /** Deselects selected item from sidebar
     * 
     * @param evt User hits deselect button on sidebar
     */
    private void sidebarDeselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sidebarDeselectActionPerformed
        // TODO add your handling code here:
        if (!sideBarList.isSelectionEmpty()) {
            sideBarList.clearSelection();
        }
    }//GEN-LAST:event_sidebarDeselectActionPerformed

    /** Resets all filters on the sidebar
     * 
     * @param evt User hits the reset filter button 
     */
    private void filterResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterResetActionPerformed
        // TODO add your handling code here:
        Favourited.setSelected(false);
        sidebar.enableOnlyFavourites(false);
        RoomType.setSelectedIndex(0);
        Search.setText("Search");
        if (sideBarList.getSelectedIndex() >= 0) {
            sideBarList.clearSelection();
        }

        redrawMap();
    }//GEN-LAST:event_filterResetActionPerformed
    
    /** Checks if window is maximized 
     *
     * @param state the current window state
     */
    private static boolean isMaximized(int state) {
        return (state & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Favourited;
    private javax.swing.JComboBox<String> FloorNum;
    private javax.swing.JComboBox<String> RoomType;
    private javax.swing.JTextField Search;
    private static javax.swing.JPanel Sidebar;
    private javax.swing.JComboBox<String> buildingSelect;
    private javax.swing.JButton filterReset;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    public javax.swing.JPanel mapPanel;
    private javax.swing.JButton resetMapSize;
    private javax.swing.JList<String> sideBarList;
    private javax.swing.JScrollPane sideBarListPane;
    private javax.swing.JButton sidebarDeselect;
    private javax.swing.JPanel toolbarPanel;
    // End of variables declaration//GEN-END:variables
}
